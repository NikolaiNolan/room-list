/*
 * Generates common combinations of flexbox properties.
 * @param {string} $direction
 * @param {string} $justify
 * @param {string} $align
 * @param {string} $wrap
 */
@mixin flex($direction: '', $justify: '', $align: '', $wrap: '') {
  display: flex;
  flex-direction: unquote($direction);
  flex-wrap: unquote($wrap);
  justify-content: unquote($justify);
  align-items: unquote($align);
}

/*
 * Positions flex children on top of each other.
 */
@mixin overlapping-flex {
  flex-shrink: 0;
  margin-right: -100%;
  box-sizing: border-box;
  width: 100%;
}

/*
 * Absolutely positions an element, like margin/padding shorthand.
 * @param {...string} $value
 */
@mixin absolute-position($value...) {
  position: absolute;
  $top: nth($value, 1);
  $bottom: nth($value, 1);
  $left: nth($value, 1);
  $right: nth($value, 1);

  @if length($value) == 2 or length($value) == 3 {
    $left: nth($value, 2);
  }

  @if length($value) >= 2 {
    $right: nth($value, 2);
  }

  @if length($value) >= 3 {
    $bottom: nth($value, 3);
  }

  @if length($value) == 4 {
    $left: nth($value, 4);
  }

  top: $top;
  bottom: $bottom;
  left: $left;
  right: $right;
}

/*
 * Centers an element both vertically and horizontally.
 */
@mixin absolute-center {
  @include absolute-position(0);
  margin: auto;
}

/*
 * This mixin can be used to set the object-fit:
 * @include object-fit(contain);
 * or object-fit and object-position:
 * @include object-fit(cover, top);
 *
 * @param {string=} $fit
 * @param {string=} $position
 */
@mixin object-fit($fit: fill, $position: null) {
  -o-object-fit: $fit;
  object-fit: $fit;

  @if $position {
    -o-object-position: $position;
    object-position: $position;
    font-family: 'object-fit: #{$fit}; object-position: #{$position}';
  }

  @else {
    font-family: 'object-fit: #{$fit}';
  }
}

/*
 * Makes an image cover the background of a relatively positioned container.
 */
@mixin cover-background {
  @include absolute-center;
  @include size(100%);
  @include object-fit(cover);
  z-index: -1;
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

/*
 * Scales font size based on viewport with, with minimum and maximum sizes
 */
@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;

      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

/*
 * Removes default styling from ul and ol elements.
 */
@mixin list-reset {
  margin: 0;
  padding: 0;
  list-style: none;
}

/*
 * Removes default styling from button elements.
 */
@mixin button-reset {
  margin: 0;
  padding: 0;
  border: 0;
  background-color: transparent;
  color: inherit;
  font: inherit;
}

/*
 * Sets default transition properties for general elements based on Material Design recommendations.
 * {@link https://material.io/design/motion/speed.html}
 * @param {string=} $property
 * @param {string=} $duration
 * @param {string=} $delay
 * @param {string=} $timing
 */
@mixin transition($property: all, $duration: 195ms, $delay: 0s, $timing: cubic-bezier(.4, 0, .2, 1)) {
  transition: {
    property: unquote($property);
    duration: $duration;
    timing-function: unquote($timing);
    delay: $delay;
  }
}

/*
 * Sets default transition properties for entering elements based on Material Design recommendations.
 * {@link https://material.io/design/motion/speed.html}
 * @param {string=} $property
 * @param {string=} $duration
 * @param {string=} $delay
 * @param {string=} $timing
 */
@mixin transition-enter($property: all, $duration: 195ms, $delay: 0s, $timing: cubic-bezier(0, 0, .2, 1)) {
  transition: {
    property: unquote($property);
    duration: $duration;
    timing-function: unquote($timing);
    delay: $delay;
  }
}

/*
 * Sets default transition properties for leaving elements based on Material Design recommendations.
 * {@link https://material.io/design/motion/speed.html}
 * @param {string=} $property
 * @param {string=} $duration
 * @param {string=} $delay
 * @param {string=} $timing
 */
@mixin transition-leave($property: all, $duration: 195ms, $delay: 0s, $timing: cubic-bezier(.4, 0, 1, 1)) {
  transition: {
    property: unquote($property);
    duration: $duration;
    timing-function: unquote($timing);
    delay: $delay;
  }
}

/*
 * Uses generated content to create an element for styling.
 * @param {string=} $placement
 * @param {string=} $display
 */
@mixin generated-block($placement: after, $display: inline-block) {
  &::#{$placement} {
    @content;
    content: '';
    display: $display;
  }
}

$grid-breakpoints: (
  xs: 0,
  sm: 600px,
  md: 960px,
  lg: 1264px,
  xl: 1904px
);

/*
 * Generates a min-width media query for the specified breakpoint.
 * @param {string} $breakpoint
 */
@mixin min-width($breakpoint) {
  @media (min-width: if(map-get($grid-breakpoints, $breakpoint), map-get($grid-breakpoints, $breakpoint), $breakpoint)) {
    @content;
  }
}

/*
 * Generates a media query spanning the width range between the low point and one less than the high point.
 * @param {string} $lowpoint
 * @param {string} $highpoint
 */
@mixin between-width($lowpoint, $highpoint) {
  @media (min-width: if(map-get($grid-breakpoints, $lowpoint), map-get($grid-breakpoints, $lowpoint), $lowpoint)) and (max-width: if(map-get($grid-breakpoints, $highpoint), map-get($grid-breakpoints, $highpoint) - 1, $highpoint)) {
    @content;
  }
}

/*
 * Generates a max-width media query for one less than the specified breakpoint.
 * @param {string} $breakpoint
 */
@mixin max-width($breakpoint) {
  @media (max-width: if(map-get($grid-breakpoints, $breakpoint), map-get($grid-breakpoints, $breakpoint) - 1, $breakpoint)) {
    @content;
  }
}

/*
 * Generates a min-height media query for the specified breakpoint.
 * @param {string} $breakpoint
 */
@mixin min-height($breakpoint) {
  @media (min-height: if(map-get($grid-breakpoints, $breakpoint), map-get($grid-breakpoints, $breakpoint), $breakpoint)) {
    @content;
  }
}

/*
 * Generates a media query spanning the width height between the low point and one less than the high point.
 * @param {string} $lowpoint
 * @param {string} $highpoint
 */
@mixin between-height($lowpoint, $highpoint) {
  @media (min-height: if(map-get($grid-breakpoints, $lowpoint), map-get($grid-breakpoints, $lowpoint), $lowpoint)) and (max-height: if(map-get($grid-breakpoints, $highpoint), map-get($grid-breakpoints, $highpoint) - 1, $highpoint)) {
    @content;
  }
}

/*
 * Generates a max-height media query for one less than the specified breakpoint.
 * @param {string} $breakpoint
 */
@mixin max-height($breakpoint) {
  @media (max-height: if(map-get($grid-breakpoints, $breakpoint), map-get($grid-breakpoints, $breakpoint) - 1, $breakpoint)) {
    @content;
  }
}
